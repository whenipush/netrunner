package controllers

import (
	"bufio"
	"fmt"
	"log"
	"net/http"
	"netrunner/database"
	"netrunner/handlers"
	"netrunner/models"
	"os"
	"os/exec"
	"regexp"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
)

func ExecutePentest(task models.TaskStatus, params PentestParams) error {
	if params.Ports == "" {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("missing required parameter 'ports'")
	}

	report := fmt.Sprintf("report/pentest/%s.xml", task.NumberTask)

	ipList := []string{}
	for _, host := range task.Hosts {
		ipList = append(ipList, host.IP)
	}
	ip := strings.Join(ipList, " ")
	if ip == "" {
		return fmt.Errorf("no valid hosts specified")
	}

	command := fmt.Sprintf("nmap -sV --script vuln --stats-every 5s -p %s -T%s %s -oX %s", params.Ports, params.Speed, ip, report)
	cmd := exec.Command("powershell", "-Command", command)

	stdout, err := cmd.StdoutPipe()
	if err != nil {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("failed to get stdout pipe: %v", err)
	}
	defer stdout.Close()

	stderr, err := cmd.StderrPipe()
	if err != nil {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("failed to get stderr pipe: %v", err)
	}
	defer stderr.Close()

	if err := cmd.Start(); err != nil {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("failed to start Pentest command: %v", err)
	}

	progressRegex := regexp.MustCompile(`About (\d+(\.\d+)?)% done`)
	go func() {
		scanner := bufio.NewScanner(stdout)
		for scanner.Scan() {
			line := scanner.Text()
			log.Printf("[Pentest]: %s", line)

			if matches := progressRegex.FindStringSubmatch(line); matches != nil {
				percent := matches[1]
				percentValue, _ := strconv.ParseFloat(percent, 32)
				task.Percent = float32(percentValue)
				database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("percent", percentValue)
				BroadcastTask(task)
			}
		}
	}()

	go func() {
		scanner := bufio.NewScanner(stderr)
		for scanner.Scan() {
			log.Printf("[Pentest STDERR]: %s", scanner.Text())
		}
	}()

	if err := cmd.Wait(); err != nil {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("pentest execution failed: %v", err)
	}

	// Обработка отчета
	var pentest handlers.PentestReportController
	_, err = pentest.ProcessPentest(task)
	if err != nil {
		database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Update("status", StatusError)
		return fmt.Errorf("failed to process Pentest report: %v", err)
	}

	database.DB.Model(&models.TaskStatus{}).Where("id = ?", task.ID).Updates(map[string]interface{}{
		"status":  StatusCompleted,
		"percent": 100.0,
	})
	task.Status = StatusCompleted
	task.Percent = 100.0
	BroadcastTask(task)

	return nil
}

func GetPentestJsonByNumberTask(c *gin.Context) {
	var task models.TaskStatus
	numberTask := c.Param("number_task")

	if err := database.DB.Where("number_task = ?", numberTask).First(&task).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Task not found"})
		return
	}

	report := fmt.Sprintf("report/pentest/%s.xml.json", task.NumberTask)
	file, err := os.ReadFile(report)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"err": "Отчет не найден"})
		return
	}

	c.Data(http.StatusOK, "application/json", []byte(file))

}
